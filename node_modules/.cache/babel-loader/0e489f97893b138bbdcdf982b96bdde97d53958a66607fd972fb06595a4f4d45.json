{"ast":null,"code":"var _jsxFileName = \"/home/dell/Desktop/Arsha/face-recognition-ui/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport DriveUploader from \"../components/DriveUploader\";\nimport ImageSelector from \"../components/ImageSelector\";\nimport ProcessImage from \"../components/ProcessImage\";\nimport { fetchDriveImages } from \"../services/googleDriveService\";\nimport { processImageWithAzure } from \"../services/azureVisionService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const handleFetchImages = async driveLink => {\n    const fetchedImages = await fetchDriveImages(driveLink);\n    setImages(fetchedImages);\n  };\n  const handleProcessImage = async () => {\n    if (selectedImage) {\n      const result = await processImageWithAzure(selectedImage);\n      alert(\"Processing Result: \" + JSON.stringify(result));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Google Drive Image Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DriveUploader, {\n      onFetchImages: handleFetchImages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(ImageSelector, {\n      images: images,\n      onSelectImage: setSelectedImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 29\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(ProcessImage, {\n      selectedImage: selectedImage,\n      onProcess: handleProcessImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"02WLYOK8nttbYKCtIY5ezbYKBuE=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","DriveUploader","ImageSelector","ProcessImage","fetchDriveImages","processImageWithAzure","jsxDEV","_jsxDEV","Home","_s","images","setImages","selectedImage","setSelectedImage","handleFetchImages","driveLink","fetchedImages","handleProcessImage","result","alert","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFetchImages","length","onSelectImage","onProcess","_c","$RefreshReg$"],"sources":["/home/dell/Desktop/Arsha/face-recognition-ui/src/pages/Home.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport DriveUploader from \"../components/DriveUploader\";\nimport ImageSelector from \"../components/ImageSelector\";\nimport ProcessImage from \"../components/ProcessImage\";\nimport { fetchDriveImages } from \"../services/googleDriveService\";\nimport { processImageWithAzure } from \"../services/azureVisionService\";\n\nconst Home = () => {\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  const handleFetchImages = async (driveLink) => {\n    const fetchedImages = await fetchDriveImages(driveLink);\n    setImages(fetchedImages);\n  };\n\n  const handleProcessImage = async () => {\n    if (selectedImage) {\n      const result = await processImageWithAzure(selectedImage);\n      alert(\"Processing Result: \" + JSON.stringify(result));\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Google Drive Image Recognition</h2>\n      <DriveUploader onFetchImages={handleFetchImages} />\n      {images.length > 0 && <ImageSelector images={images} onSelectImage={setSelectedImage} />}\n      {selectedImage && <ProcessImage selectedImage={selectedImage} onProcess={handleProcessImage} />}\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,qBAAqB,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMc,iBAAiB,GAAG,MAAOC,SAAS,IAAK;IAC7C,MAAMC,aAAa,GAAG,MAAMZ,gBAAgB,CAACW,SAAS,CAAC;IACvDJ,SAAS,CAACK,aAAa,CAAC;EAC1B,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAIL,aAAa,EAAE;MACjB,MAAMM,MAAM,GAAG,MAAMb,qBAAqB,CAACO,aAAa,CAAC;MACzDO,KAAK,CAAC,qBAAqB,GAAGC,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,CAAC;IACvD;EACF,CAAC;EAED,oBACEX,OAAA;IAAKe,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBhB,OAAA;MAAAgB,QAAA,EAAI;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvCpB,OAAA,CAACN,aAAa;MAAC2B,aAAa,EAAEd;IAAkB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAClDjB,MAAM,CAACmB,MAAM,GAAG,CAAC,iBAAItB,OAAA,CAACL,aAAa;MAACQ,MAAM,EAAEA,MAAO;MAACoB,aAAa,EAAEjB;IAAiB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACvFf,aAAa,iBAAIL,OAAA,CAACJ,YAAY;MAACS,aAAa,EAAEA,aAAc;MAACmB,SAAS,EAAEd;IAAmB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5F,CAAC;AAEV,CAAC;AAAClB,EAAA,CAxBID,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AA0BV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}